{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.date.to-json.js","webpack:///./node_modules/ascii-table/ascii-table.js","webpack:///./src/pages/index.js","webpack:///./node_modules/core-js/modules/es6.date.to-string.js","webpack:///./node_modules/ascii-table/index.js"],"names":["$export","toObject","toPrimitive","P","F","Date","NaN","toJSON","prototype","call","toISOString","key","O","this","pv","isFinite","slice","Array","toString","Object","AsciiTable","name","options","reset","VERSION","LEFT","CENTER","RIGHT","factory","align","dir","str","len","pad","alignLeft","alignRight","alignCenter","alignAuto","length","join","nLen","half","Math","floor","odds","abs","type","arrayFill","fill","arr","i","clear","__name","__nameAlign","__rows","__maxCells","__aligns","__colMaxes","__spacing","__heading","__headingAlign","setBorder","fromJSON","edge","top","bottom","__border","arguments","__edge","__fill","__top","__bottom","removeBorder","setAlign","idx","setTitle","getTitle","setTitleAlign","sort","method","sortColumn","a","b","setHeading","row","getHeading","setHeadingAlign","addRow","max","push","getRows","map","addRowMatrix","rows","addData","data","rowCallback","asMatrix","index","limit","clearRows","setJustify","val","__justify","title","heading","parse","obj","render","valueOf","justify","self","body","mLen","total","border","all","concat","k","cell","apply","forEach","x","_seperator","_renderTitle","_renderRow","_rowSeperator","prefix","sep","blanks","tmp","cAlign","use","front","substr","constant","toUpperCase","args","module","exports","require","IndexComponent","murphs","props","allMurphs","nodes","murphTables","murph","console","log","parent","table","toDateString","results","entry","time","class","style","textAlign","href","React","Component","IndexQuery","DateProto","$toString","getTime","value"],"mappings":"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","file":"component---src-pages-index-js-514d69aa1a6077bd8b2a.js","sourcesContent":["'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\n\n$export($export.P + $export.F * require('./_fails')(function () {\n  return new Date(NaN).toJSON() !== null\n    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;\n}), 'Date', {\n  // eslint-disable-next-line no-unused-vars\n  toJSON: function toJSON(key) {\n    var O = toObject(this);\n    var pv = toPrimitive(O);\n    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n  }\n});\n","require(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.date.to-json\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\n/**\n * (c) 2013 Beau Sorensen\n * MIT Licensed\n * For all details and documentation:\n * https://github.com/sorensen/ascii-table\n */\n;\n(function () {\n  'use strict';\n  /*!\n   * Module dependencies\n   */\n\n  var slice = Array.prototype.slice,\n      toString = Object.prototype.toString;\n  /**\n   * AsciiTable constructor\n   *\n   * @param {String|Object} title or JSON table\n   * @param {Object} table options\n   *  - `prefix` - string prefix added to each line on render\n   * @constructor\n   * @api public\n   */\n\n  function AsciiTable(name, options) {\n    this.options = options || {};\n    this.reset(name);\n  }\n  /*!\n   * Current library version, should match `package.json`\n   */\n\n\n  AsciiTable.VERSION = '0.0.8';\n  /*!\n   * Alignment constants\n   */\n\n  AsciiTable.LEFT = 0;\n  AsciiTable.CENTER = 1;\n  AsciiTable.RIGHT = 2;\n  /*!\n   * Static methods\n   */\n\n  /**\n   * Create a new table instance\n   *\n   * @param {String|Object} title or JSON table\n   * @param {Object} table options\n   * @api public\n   */\n\n  AsciiTable.factory = function (name, options) {\n    return new AsciiTable(name, options);\n  };\n  /**\n   * Align the a string at the given length\n   *\n   * @param {Number} direction\n   * @param {String} string input\n   * @param {Number} string length\n   * @param {Number} padding character\n   * @api public\n   */\n\n\n  AsciiTable.align = function (dir, str, len, pad) {\n    if (dir === AsciiTable.LEFT) return AsciiTable.alignLeft(str, len, pad);\n    if (dir === AsciiTable.RIGHT) return AsciiTable.alignRight(str, len, pad);\n    if (dir === AsciiTable.CENTER) return AsciiTable.alignCenter(str, len, pad);\n    return AsciiTable.alignAuto(str, len, pad);\n  };\n  /**\n   * Left align a string by padding it at a given length\n   *\n   * @param {String} str\n   * @param {Number} string length\n   * @param {String} padding character (optional, default '')\n   * @api public\n   */\n\n\n  AsciiTable.alignLeft = function (str, len, pad) {\n    if (!len || len < 0) return '';\n    if (str === undefined || str === null) str = '';\n    if (typeof pad === 'undefined') pad = ' ';\n    if (typeof str !== 'string') str = str.toString();\n    var alen = len + 1 - str.length;\n    if (alen <= 0) return str;\n    return str + Array(len + 1 - str.length).join(pad);\n  };\n  /**\n   * Center align a string by padding it at a given length\n   *\n   * @param {String} str\n   * @param {Number} string length\n   * @param {String} padding character (optional, default '')\n   * @api public\n   */\n\n\n  AsciiTable.alignCenter = function (str, len, pad) {\n    if (!len || len < 0) return '';\n    if (str === undefined || str === null) str = '';\n    if (typeof pad === 'undefined') pad = ' ';\n    if (typeof str !== 'string') str = str.toString();\n    var nLen = str.length,\n        half = Math.floor(len / 2 - nLen / 2),\n        odds = Math.abs(nLen % 2 - len % 2),\n        len = str.length;\n    return AsciiTable.alignRight('', half, pad) + str + AsciiTable.alignLeft('', half + odds, pad);\n  };\n  /**\n   * Right align a string by padding it at a given length\n   *\n   * @param {String} str\n   * @param {Number} string length\n   * @param {String} padding character (optional, default '')\n   * @api public\n   */\n\n\n  AsciiTable.alignRight = function (str, len, pad) {\n    if (!len || len < 0) return '';\n    if (str === undefined || str === null) str = '';\n    if (typeof pad === 'undefined') pad = ' ';\n    if (typeof str !== 'string') str = str.toString();\n    var alen = len + 1 - str.length;\n    if (alen <= 0) return str;\n    return Array(len + 1 - str.length).join(pad) + str;\n  };\n  /**\n   * Auto align string value based on object type\n   *\n   * @param {Any} object to string\n   * @param {Number} string length\n   * @param {String} padding character (optional, default '')\n   * @api public\n   */\n\n\n  AsciiTable.alignAuto = function (str, len, pad) {\n    if (str === undefined || str === null) str = '';\n    var type = toString.call(str);\n    pad || (pad = ' ');\n    len = +len;\n\n    if (type !== '[object String]') {\n      str = str.toString();\n    }\n\n    if (str.length < len) {\n      switch (type) {\n        case '[object Number]':\n          return AsciiTable.alignRight(str, len, pad);\n\n        default:\n          return AsciiTable.alignLeft(str, len, pad);\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Fill an array at a given size with the given value\n   *\n   * @param {Number} array size\n   * @param {Any} fill value\n   * @return {Array} filled array\n   * @api public\n   */\n\n\n  AsciiTable.arrayFill = function (len, fill) {\n    var arr = new Array(len);\n\n    for (var i = 0; i !== len; i++) {\n      arr[i] = fill;\n    }\n\n    return arr;\n  };\n  /*!\n   * Instance methods\n   */\n\n  /**\n   * Reset the table state back to defaults\n   *\n   * @param {String|Object} title or JSON table\n   * @api public\n   */\n\n\n  AsciiTable.prototype.reset = AsciiTable.prototype.clear = function (name) {\n    this.__name = '';\n    this.__nameAlign = AsciiTable.CENTER;\n    this.__rows = [];\n    this.__maxCells = 0;\n    this.__aligns = [];\n    this.__colMaxes = [];\n    this.__spacing = 1;\n    this.__heading = null;\n    this.__headingAlign = AsciiTable.CENTER;\n    this.setBorder();\n\n    if (toString.call(name) === '[object String]') {\n      this.__name = name;\n    } else if (toString.call(name) === '[object Object]') {\n      this.fromJSON(name);\n    }\n\n    return this;\n  };\n  /**\n   * Set the table border\n   *\n   * @param {String} horizontal edges (optional, default `|`)\n   * @param {String} vertical edges (optional, default `-`)\n   * @param {String} top corners (optional, default `.`)\n   * @param {String} bottom corners (optional, default `'`)\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setBorder = function (edge, fill, top, bottom) {\n    this.__border = true;\n\n    if (arguments.length === 1) {\n      fill = top = bottom = edge;\n    }\n\n    this.__edge = edge || '|';\n    this.__fill = fill || '-';\n    this.__top = top || '.';\n    this.__bottom = bottom || \"'\";\n    return this;\n  };\n  /**\n   * Remove all table borders\n   *\n   * @api public\n   */\n\n\n  AsciiTable.prototype.removeBorder = function () {\n    this.__border = false;\n    this.__edge = ' ';\n    this.__fill = ' ';\n    return this;\n  };\n  /**\n   * Set the column alignment at a given index\n   *\n   * @param {Number} column index\n   * @param {Number} alignment direction\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setAlign = function (idx, dir) {\n    this.__aligns[idx] = dir;\n    return this;\n  };\n  /**\n   * Set the title of the table\n   *\n   * @param {String} title\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setTitle = function (name) {\n    this.__name = name;\n    return this;\n  };\n  /**\n   * Get the title of the table\n   *\n   * @return {String} title\n   * @api public\n   */\n\n\n  AsciiTable.prototype.getTitle = function () {\n    return this.__name;\n  };\n  /**\n   * Set table title alignment\n   *\n   * @param {Number} direction\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setTitleAlign = function (dir) {\n    this.__nameAlign = dir;\n    return this;\n  };\n  /**\n   * AsciiTable sorting shortcut to sort rows\n   *\n   * @param {Function} sorting method\n   * @api public\n   */\n\n\n  AsciiTable.prototype.sort = function (method) {\n    this.__rows.sort(method);\n\n    return this;\n  };\n  /**\n   * Sort rows based on sort method for given column\n   *\n   * @param {Number} column index\n   * @param {Function} sorting method\n   * @api public\n   */\n\n\n  AsciiTable.prototype.sortColumn = function (idx, method) {\n    this.__rows.sort(function (a, b) {\n      return method(a[idx], b[idx]);\n    });\n\n    return this;\n  };\n  /**\n   * Set table heading for columns\n   *\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setHeading = function (row) {\n    if (arguments.length > 1 || toString.call(row) !== '[object Array]') {\n      row = slice.call(arguments);\n    }\n\n    this.__heading = row;\n    return this;\n  };\n  /**\n   * Get table heading for columns\n   *\n   * @return {Array} copy of headings\n   * @api public\n   */\n\n\n  AsciiTable.prototype.getHeading = function () {\n    return this.__heading.slice();\n  };\n  /**\n   * Set heading alignment\n   *\n   * @param {Number} direction\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setHeadingAlign = function (dir) {\n    this.__headingAlign = dir;\n    return this;\n  };\n  /**\n   * Add a row of information to the table\n   * \n   * @param {...|Array} argument values in order of columns\n   * @api public\n   */\n\n\n  AsciiTable.prototype.addRow = function (row) {\n    if (arguments.length > 1 || toString.call(row) !== '[object Array]') {\n      row = slice.call(arguments);\n    }\n\n    this.__maxCells = Math.max(this.__maxCells, row.length);\n\n    this.__rows.push(row);\n\n    return this;\n  };\n  /**\n   * Get a copy of all rows of the table\n   *\n   * @return {Array} copy of rows\n   * @api public\n   */\n\n\n  AsciiTable.prototype.getRows = function () {\n    return this.__rows.slice().map(function (row) {\n      return row.slice();\n    });\n  };\n  /**\n   * Add rows in the format of a row matrix\n   *\n   * @param {Array} row matrix\n   * @api public\n   */\n\n\n  AsciiTable.prototype.addRowMatrix = function (rows) {\n    for (var i = 0; i < rows.length; i++) {\n      this.addRow(rows[i]);\n    }\n\n    return this;\n  };\n  /**\n   * Add rows from the given data array, processed by the callback function rowCallback.\n   *\n   * @param {Array} data\n   * @param (Function) rowCallback\n   * @param (Boolean) asMatrix - controls if the row created by rowCallback should be assigned as row matrix\n   * @api public\n   */\n\n\n  AsciiTable.prototype.addData = function (data, rowCallback, asMatrix) {\n    if (toString.call(data) !== '[object Array]') {\n      return this;\n    }\n\n    for (var index = 0, limit = data.length; index < limit; index++) {\n      var row = rowCallback(data[index]);\n\n      if (asMatrix) {\n        this.addRowMatrix(row);\n      } else {\n        this.addRow(row);\n      }\n    }\n\n    return this;\n  };\n  /**\n  * Reset the current row state\n  *\n  * @api public\n  */\n\n\n  AsciiTable.prototype.clearRows = function () {\n    this.__rows = [];\n    this.__maxCells = 0;\n    this.__colMaxes = [];\n    return this;\n  };\n  /**\n   * Apply an even spaced column justification\n   *\n   * @param {Boolean} on / off\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setJustify = function (val) {\n    arguments.length === 0 && (val = true);\n    this.__justify = !!val;\n    return this;\n  };\n  /**\n   * Convert the current instance to a JSON structure\n   *\n   * @return {Object} json representation\n   * @api public\n   */\n\n\n  AsciiTable.prototype.toJSON = function () {\n    return {\n      title: this.getTitle(),\n      heading: this.getHeading(),\n      rows: this.getRows()\n    };\n  };\n  /**\n   * Populate the table from a JSON object\n   *\n   * @param {Object} json representation\n   * @api public\n   */\n\n\n  AsciiTable.prototype.parse = AsciiTable.prototype.fromJSON = function (obj) {\n    return this.clear().setTitle(obj.title).setHeading(obj.heading).addRowMatrix(obj.rows);\n  };\n  /**\n   * Render the table with the current information\n   *\n   * @return {String} formatted table\n   * @api public\n   */\n\n\n  AsciiTable.prototype.render = AsciiTable.prototype.valueOf = AsciiTable.prototype.toString = function () {\n    var self = this,\n        body = [],\n        mLen = this.__maxCells,\n        max = AsciiTable.arrayFill(mLen, 0),\n        total = mLen * 3,\n        rows = this.__rows,\n        justify,\n        border = this.__border,\n        all = this.__heading ? [this.__heading].concat(rows) : rows; // Calculate max table cell lengths across all rows\n\n    for (var i = 0; i < all.length; i++) {\n      var row = all[i];\n\n      for (var k = 0; k < mLen; k++) {\n        var cell = row[k];\n        max[k] = Math.max(max[k], cell ? cell.toString().length : 0);\n      }\n    }\n\n    this.__colMaxes = max;\n    justify = this.__justify ? Math.max.apply(null, max) : 0; // Get \n\n    max.forEach(function (x) {\n      total += justify ? justify : x + self.__spacing;\n    });\n    justify && (total += max.length);\n    total -= this.__spacing; // Heading\n\n    border && body.push(this._seperator(total - mLen + 1, this.__top));\n\n    if (this.__name) {\n      body.push(this._renderTitle(total - mLen + 1));\n      border && body.push(this._seperator(total - mLen + 1));\n    }\n\n    if (this.__heading) {\n      body.push(this._renderRow(this.__heading, ' ', this.__headingAlign));\n      body.push(this._rowSeperator(mLen, this.__fill));\n    }\n\n    for (var i = 0; i < this.__rows.length; i++) {\n      body.push(this._renderRow(this.__rows[i], ' '));\n    }\n\n    border && body.push(this._seperator(total - mLen + 1, this.__bottom));\n    var prefix = this.options.prefix || '';\n    return prefix + body.join('\\n' + prefix);\n  };\n  /**\n   * Create a line seperator\n   *\n   * @param {Number} string size\n   * @param {String} side values (default '|')\n   * @api private\n   */\n\n\n  AsciiTable.prototype._seperator = function (len, sep) {\n    sep || (sep = this.__edge);\n    return sep + AsciiTable.alignRight(sep, len, this.__fill);\n  };\n  /**\n   * Create a row seperator\n   *\n   * @return {String} seperator\n   * @api private\n   */\n\n\n  AsciiTable.prototype._rowSeperator = function () {\n    var blanks = AsciiTable.arrayFill(this.__maxCells, this.__fill);\n    return this._renderRow(blanks, this.__fill);\n  };\n  /**\n   * Render the table title in a centered box\n   *\n   * @param {Number} string size\n   * @return {String} formatted title\n   * @api private\n   */\n\n\n  AsciiTable.prototype._renderTitle = function (len) {\n    var name = ' ' + this.__name + ' ',\n        str = AsciiTable.align(this.__nameAlign, name, len - 1, ' ');\n    return this.__edge + str + this.__edge;\n  };\n  /**\n   * Render an invdividual row\n   *\n   * @param {Array} row\n   * @param {String} column seperator\n   * @param {Number} total row alignment (optional, default `auto`)\n   * @return {String} formatted row\n   * @api private\n   */\n\n\n  AsciiTable.prototype._renderRow = function (row, str, align) {\n    var tmp = [''],\n        max = this.__colMaxes;\n\n    for (var k = 0; k < this.__maxCells; k++) {\n      var cell = row[k],\n          just = this.__justify ? Math.max.apply(null, max) : max[k] // , pad = k === this.__maxCells - 1 ? just : just + this.__spacing\n      ,\n          pad = just,\n          cAlign = this.__aligns[k],\n          use = align,\n          method = 'alignAuto';\n      if (typeof align === 'undefined') use = cAlign;\n      if (use === AsciiTable.LEFT) method = 'alignLeft';\n      if (use === AsciiTable.CENTER) method = 'alignCenter';\n      if (use === AsciiTable.RIGHT) method = 'alignRight';\n      tmp.push(AsciiTable[method](cell, pad, str));\n    }\n\n    var front = tmp.join(str + this.__edge + str);\n    front = front.substr(1, front.length);\n    return front + str + this.__edge;\n  }\n  /*!\n   * Aliases\n   */\n  // Create method shortcuts to all alignment methods for each direction\n  ;\n\n  ['Left', 'Right', 'Center'].forEach(function (dir) {\n    var constant = AsciiTable[dir.toUpperCase()];\n    ['setAlign', 'setTitleAlign', 'setHeadingAlign'].forEach(function (method) {\n      // Call the base method with the direction constant as the last argument\n      AsciiTable.prototype[method + dir] = function () {\n        var args = slice.call(arguments).concat(constant);\n        return this[method].apply(this, args);\n      };\n    });\n  });\n  /*!\n   * Module exports.\n   */\n\n  if (typeof exports !== 'undefined') {\n    module.exports = AsciiTable;\n  } else {\n    this.AsciiTable = AsciiTable;\n  }\n}).call(this);","import { graphql } from \"gatsby\"\nimport React from \"react\"\nimport \"./styles.css\"\nvar AsciiTable = require('ascii-table')\n\nclass IndexComponent extends React.Component {\n  render() {\n    const murphs = this.props.data.allMurphs.nodes\n    var murphTables = []\n\n    murphs.forEach(murph => {\n      console.log(murph.parent.name)\n      console.log(Date.parse(murph.parent.name).toString())\n      var table = new AsciiTable(new Date(Date.parse(murph.parent.name + \"T16:11:20.019Z\")).toDateString())\n      table.setHeading('Name', 'Time')\n      murph.results.forEach(entry => {\n        table.addRow(entry.name, entry.time)\n      });\n      murphTables.push(table)\n    });\n    \n    return (\n      <div>\n          <h1 class=\"rainbow rainbow_text_animated\">Next YAS Murph - 7:00 AM August 8 @ Alex's </h1>\n          <div style={{textAlign: 'center'}}><a href=\"spotify:playlist:0UAPiXhYnNrndtZpEzPLjX\">Spotify Playlist</a></div>\n          <pre style={{textAlign: 'center'}}>Results:</pre>\n          {murphTables.map((table, i) => (\n            <pre style={{textAlign: 'center'}} key={i}>{table.toString()}</pre>\n          ))}\n      </div>\n    )\n  }\n}\n\nexport default IndexComponent\n\nexport const IndexQuery = graphql`\nquery {\n  allMurphs(sort: {fields: parent___id}) {\n    nodes {\n      results {\n        name\n        time\n      }\n      parent {\n        ... on File {\n          name\n        }\n      }\n    }\n  }\n}\n`","var DateProto = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar $toString = DateProto[TO_STRING];\nvar getTime = DateProto.getTime;\nif (new Date(NaN) + '' != INVALID_DATE) {\n  require('./_redefine')(DateProto, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n","module.exports = require('./ascii-table');"],"sourceRoot":""}